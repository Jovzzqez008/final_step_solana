# bot_jupiter_v2.py - USANDO JUPITER LITE v2
import asyncio, json, os, time, logging, aiohttp
from statistics import pstdev, mean
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from collections import defaultdict, deque

# ===================== CONFIGURACI√ìN OPTIMIZADA =====================
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TARGET_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# üõ°Ô∏è FILTROS ANTIRUG PULL
MIN_VOLUME_USD = 50000.0          # Volumen m√≠nimo ALTO
MIN_LIQUIDITY = 30000.0           # Liquidez m√≠nima ALTA  
MIN_AGE_HOURS = 8                # M√≠nimo 24 horas de antig√ºedad
FLAT_STD_THRESHOLD = 0.2          # M√°s estricto para "plano"
BREAKOUT_STEP = 15.0              # Breakout al 30%
UPDATE_INTERVAL = 20              # M√°s r√°pido con Jupiter v2

# APIs
JUPITER_TOKENS_V1 = "https://api.jup.ag/tokens/v1/all"  # ‚úÖ v1 probada
DEXSCREENER_API = "https://api.dexscreener.com/latest/dex"

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("diagnostico_bot")

# ===================== ESTADO =====================
price_histories = defaultdict(lambda: deque(maxlen=20))
flat_tokens = {}
watchlist = []
token_metadata = {}
bot_active = False
monitored_tokens = set()
blacklisted_tokens = set()

# ===================== API CLIENT CON DIAGN√ìSTICO =====================
class DiagnosticAPI:
    def __init__(self):
        self.session = None
        self.request_count = 0
        self.last_error = None
        
    async def get_session(self):
        if not self.session:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def test_jupiter_connection(self):
        """Prueba la conexi√≥n a Jupiter API"""
        try:
            session = await self.get_session()
            logger.info("üîç TESTEANDO CONEXI√ìN JUPITER API...")
            
            async with session.get(JUPITER_TOKENS_V1, timeout=15) as response:
                self.request_count += 1
                
                if response.status == 200:
                    tokens = await response.json()
                    logger.info(f"‚úÖ JUPITER API FUNCIONA: {len(tokens)} tokens recibidos")
                    
                    # Mostrar primeros 3 tokens como ejemplo
                    for i, token in enumerate(tokens[:3]):
                        symbol = token.get('symbol', 'N/A')
                        name = token.get('name', 'N/A')
                        logger.info(f"   üìù Token {i+1}: {symbol} - {name}")
                    
                    return tokens
                else:
                    error_msg = f"‚ùå Jupiter API error: HTTP {response.status}"
                    logger.error(error_msg)
                    self.last_error = error_msg
                    return []
                    
        except Exception as e:
            error_msg = f"‚ùå Error conexi√≥n Jupiter: {e}"
            logger.error(error_msg)
            self.last_error = error_msg
            return []
    
    async def test_dexscreener_connection(self, token_address: str = "So11111111111111111111111111111111111111112"):
        """Prueba la conexi√≥n a DexScreener con SOL como ejemplo"""
        try:
            session = await self.get_session()
            logger.info(f"üîç TESTEANDO DEXSCREENER API con token SOL...")
            
            url = f"{DEXSCREENER_API}/tokens/{token_address}"
            async with session.get(url, timeout=10) as response:
                self.request_count += 1
                
                if response.status == 200:
                    data = await response.json()
                    if data.get('pairs'):
                        pair = data['pairs'][0]
                        price = pair.get('priceUsd', 'N/A')
                        volume = pair.get('volume', {}).get('h24', 'N/A')
                        logger.info(f"‚úÖ DEXSCREENER FUNCIONA: SOL = ${price}, Vol = ${volume}")
                        return True
                    else:
                        logger.error("‚ùå DexScreener no devolvi√≥ pairs")
                        return False
                else:
                    logger.error(f"‚ùå DexScreener error: HTTP {response.status}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error DexScreener: {e}")
            return False
    
    async def get_token_data(self, token_address: str):
        """Obtiene datos de token con diagn√≥stico detallado"""
        try:
            session = await self.get_session()
            url = f"{DEXSCREENER_API}/tokens/{token_address}"
            
            async with session.get(url, timeout=8) as response:
                self.request_count += 1
                
                if response.status == 200:
                    data = await response.json()
                    
                    if not data.get('pairs') or len(data['pairs']) == 0:
                        logger.debug(f"üîç Token {token_address[:8]}...: Sin pairs en DexScreener")
                        return None
                    
                    pair = data['pairs'][0]
                    price = float(pair.get('priceUsd', 0))
                    volume24h = float(pair.get('volume', {}).get('h24', 0))
                    liquidity = float(pair.get('liquidity', {}).get('usd', 0))
                    
                    # Log detallado del token
                    logger.info(f"üîç Token {token_address[:8]}...: ${price:.6f}, Vol: ${volume24h:,.0f}, Liq: ${liquidity:,.0f}")
                    
                    # Aplicar filtros (relajados para pruebas)
                    if price <= 0:
                        logger.debug(f"  ‚ùå Precio inv√°lido: ${price}")
                        return None
                    
                    if volume24h < MIN_VOLUME_USD:
                        logger.debug(f"  ‚ùå Volumen bajo: ${volume24h:,.0f} < ${MIN_VOLUME_USD:,.0f}")
                        return None
                    
                    if liquidity < MIN_LIQUIDITY:
                        logger.debug(f"  ‚ùå Liquidez baja: ${liquidity:,.0f} < ${MIN_LIQUIDITY:,.0f}")
                        return None
                    
                    # ‚úÖ TOKEN V√ÅLIDO
                    logger.info(f"  ‚úÖ TOKEN V√ÅLIDO: {token_address[:8]}...")
                    return {
                        'price': price,
                        'volume24h': volume24h,
                        'liquidity': liquidity,
                        'valid': True
                    }
                
                else:
                    logger.debug(f"‚ùå HTTP {response.status} para token {token_address[:8]}...")
                    return None
                    
        except Exception as e:
            logger.debug(f"Error obteniendo token {token_address[:8]}: {e}")
            return None

diagnostic_api = DiagnosticAPI()

# ===================== SISTEMA DE DIAGN√ìSTICO =====================
async def run_full_diagnostic(context: ContextTypes.DEFAULT_TYPE):
    """Ejecuta diagn√≥stico completo del sistema"""
    logger.info("ü©∫ INICIANDO DIAGN√ìSTICO COMPLETO...")
    
    await context.bot.send_message(
        chat_id=TARGET_CHAT_ID,
        text="ü©∫ *INICIANDO DIAGN√ìSTICO COMPLETO*\n\nProbando todas las conexiones...",
        parse_mode="Markdown"
    )
    
    # 1. Probar Jupiter API
    tokens = await diagnostic_api.test_jupiter_connection()
    
    if not tokens:
        await context.bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text="‚ùå *FALLA CR√çTICA: Jupiter API no responde*\n\n" +
                 f"Error: {diagnostic_api.last_error}",
            parse_mode="Markdown"
        )
        return False
    
    # 2. Probar DexScreener API
    dexscreener_ok = await diagnostic_api.test_dexscreener_connection()
    
    if not dexscreener_ok:
        await context.bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text="‚ùå *FALLA CR√çTICA: DexScreener API no responde*",
            parse_mode="Markdown"
        )
        return False
    
    # 3. Probar con tokens reales
    await context.bot.send_message(
        chat_id=TARGET_CHAT_ID,
        text="‚úÖ *APIS FUNCIONANDO*\n\nProbando con tokens reales...",
        parse_mode="Markdown"
    )
    
    # Probar con algunos tokens de ejemplo
    test_tokens = []
    for token in tokens[:10]:  # Primeros 10 tokens
        addr = token.get('address')
        if addr:
            test_tokens.append(addr)
    
    valid_tokens_found = 0
    for i, token_addr in enumerate(test_tokens):
        token_data = await diagnostic_api.get_token_data(token_addr)
        if token_data and token_data.get('valid'):
            valid_tokens_found += 1
            logger.info(f"‚úÖ Token #{i+1} v√°lido: {token_addr[:8]}...")
    
    # Reporte final
    diagnostic_report = (
        f"üìä *DIAGN√ìSTICO COMPLETADO*\n\n"
        f"‚úÖ APIs funcionando: Jupiter + DexScreener\n"
        f"üì¶ Tokens probados: {len(test_tokens)}\n"
        f"üéØ Tokens v√°lidos: {valid_tokens_found}\n"
        f"üìû Requests totales: {diagnostic_api.request_count}\n\n"
    )
    
    if valid_tokens_found > 0:
        diagnostic_report += f"üü¢ *SISTEMA FUNCIONAL* - {valid_tokens_found} tokens listos"
    else:
        diagnostic_report += (
            f"üî¥ *PROBLEMA* - 0 tokens v√°lidos\n\n"
            f"üí° Posibles causas:\n"
            f"‚Ä¢ Filtros muy estrictos\n"
            f"‚Ä¢ Tokens sin datos en DexScreener\n"
            f"‚Ä¢ Problemas de red"
        )
    
    await context.bot.send_message(
        chat_id=TARGET_CHAT_ID,
        text=diagnostic_report,
        parse_mode="Markdown"
    )
    
    return valid_tokens_found > 0

# ===================== MONITOREO CON DIAGN√ìSTICO =====================
async def monitor_with_diagnostic(context: ContextTypes.DEFAULT_TYPE):
    """Monitoreo con diagn√≥stico integrado"""
    logger.info("üéØ INICIANDO MONITOREO CON DIAGN√ìSTICO...")
    
    # Primero ejecutar diagn√≥stico
    system_ok = await run_full_diagnostic(context)
    
    if not system_ok:
        logger.error("‚ùå Sistema no funciona - Deteniendo monitoreo")
        return
    
    # Obtener tokens de Jupiter
    tokens = await diagnostic_api.test_jupiter_connection()
    if not tokens:
        await context.bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text="‚ùå No se pudieron obtener tokens de Jupiter",
            parse_mode="Markdown"
        )
        return
    
    # Filtrar tokens (lista reducida para pruebas)
    tokens_to_monitor = []
    for token in tokens[:30]:  # Solo 30 tokens para empezar
        addr = token.get('address')
        if addr and addr not in monitored_tokens:
            tokens_to_monitor.append(addr)
            monitored_tokens.add(addr)
    
    logger.info(f"üéØ Monitoreando {len(tokens_to_monitor)} tokens")
    
    iteration = 0
    while bot_active:
        try:
            iteration += 1
            processed = 0
            valid_tokens = 0
            
            for token_addr in tokens_to_monitor.copy():
                if not bot_active:
                    break
                
                # Obtener datos del token
                token_data = await diagnostic_api.get_token_data(token_addr)
                
                if token_data and token_data.get('valid'):
                    valid_tokens += 1
                    await process_token_diagnostic(token_addr, token_data, context)
                    processed += 1
            
            # Reporte de progreso
            if iteration % 3 == 0:
                progress_msg = (
                    f"üîç *MONITOREO - Iteraci√≥n #{iteration}*\n\n"
                    f"‚úÖ Tokens v√°lidos: {valid_tokens}/{len(tokens_to_monitor)}\n"
                    f"üìä Tokens con historial: {len(price_histories)}\n"
                    f"üìà Tokens planos: {len(flat_tokens)}\n"
                    f"üìû Requests API: {diagnostic_api.request_count}\n\n"
                    f"üí° _Sistema diagnosticado y funcionando_"
                )
                await context.bot.send_message(
                    chat_id=TARGET_CHAT_ID,
                    text=progress_msg,
                    parse_mode="Markdown"
                )
            
            await asyncio.sleep(UPDATE_INTERVAL)
            
        except Exception as e:
            logger.error(f"Error en monitoreo: {e}")
            await asyncio.sleep(20)

async def process_token_diagnostic(token_addr: str, token_data: dict, context: ContextTypes.DEFAULT_TYPE):
    """Procesa token con logging detallado"""
    try:
        current_price = token_data['price']
        
        # Actualizar historial
        hist = price_histories[token_addr]
        hist.append({
            "ts": time.time(), 
            "price": current_price,
            "volume": token_data.get('volume24h', 0)
        })
        
        logger.info(f"üìä Token {token_addr[:8]}...: {len(hist)} datos en historial")
        
        # Detectar patr√≥n plano (simplificado para pruebas)
        if len(hist) >= 5:
            prices = [p["price"] for p in hist]
            returns = [(prices[i] - prices[i-1]) / prices[i-1] * 100 for i in range(1, len(prices))]
            
            if returns:
                volatility = pstdev(returns) if len(returns) > 1 else 0
                
                if volatility < 0.5:  # Muy estable
                    if token_addr not in flat_tokens:
                        flat_tokens[token_addr] = {
                            "first_price": current_price,
                            "flat_since": time.time(),
                            "max_alert": 0
                        }
                        logger.info(f"üìà TOKEN PLANO DETECTADO: {token_addr[:8]}...")
        
        # Verificar breakout
        if token_addr in flat_tokens:
            base_price = flat_tokens[token_addr]["first_price"]
            current_pct = (current_price - base_price) / base_price * 100
            
            if current_pct >= BREAKOUT_STEP:
                logger.info(f"üöÄ BREAKOUT {current_pct:.1f}%: {token_addr[:8]}...")
                await send_diagnostic_alert(context, token_addr, current_pct, token_data)
                flat_tokens[token_addr]["max_alert"] = current_pct
        
    except Exception as e:
        logger.debug(f"Error procesando {token_addr[:8]}: {e}")

async def send_diagnostic_alert(context, token_addr, breakout_pct, token_data):
    """Env√≠a alerta de diagn√≥stico"""
    try:
        short_addr = token_addr[:8] + "..." + token_addr[-6:]
        
        alert_msg = (
            f"üéØ *BREAKOUT {breakout_pct:.1f}% DETECTADO*\n\n"
            f"*Token:* `{short_addr}`\n"
            f"*Cambio:* +{breakout_pct:.2f}%\n"
            f"*Precio:* ${token_data['price']:.6f}\n"
            f"*Volumen:* ${token_data['volume24h']:,.0f}\n\n"
            f"üîç *Verificaci√≥n:*\n"
            f"- [DexScreener](https://dexscreener.com/solana/{token_addr})\n"
            f"- [Jupiter](https://jup.ag/swap/SOL-{token_addr})"
        )
        
        await context.bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text=alert_msg,
            parse_mode="Markdown",
            disable_web_page_preview=True,
        )
        
    except Exception as e:
        logger.error(f"Error enviando alerta: {e}")

# ===================== COMANDOS TELEGRAM =====================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global TARGET_CHAT_ID
    TARGET_CHAT_ID = update.effective_chat.id
    
    welcome_msg = (
        "ü§ñ *Bot de Diagn√≥stico Completo* ü©∫\n\n"
        "Este bot incluye:\n"
        "‚Ä¢ Diagn√≥stico autom√°tico de APIs\n"
        "‚Ä¢ Pruebas de conexi√≥n en tiempo real\n"
        "‚Ä¢ Logs detallados de cada paso\n"
        "‚Ä¢ Filtros relajados para pruebas\n\n"
        "üìä *Comandos:*\n"
        "‚Ä¢ /diagnostico - Ejecutar diagn√≥stico\n"
        "‚Ä¢ /cazar - Iniciar monitoreo con diagn√≥stico\n"
        "‚Ä¢ /parar - Detener\n"
        "‚Ä¢ /status - Estado detallado\n"
        "‚Ä¢ /logs - Ver √∫ltimos logs"
    )
    
    await update.message.reply_text(welcome_msg, parse_mode="Markdown")

async def cmd_diagnostico(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ejecuta diagn√≥stico completo"""
    await update.message.reply_text(
        "ü©∫ *EJECUTANDO DIAGN√ìSTICO COMPLETO*\n\n"
        "Probando:\n"
        "‚Ä¢ Conexi√≥n a Jupiter API\n"
        "‚Ä¢ Conexi√≥n a DexScreener\n"
        "‚Ä¢ Tokens de ejemplo\n"
        "‚Ä¢ Filtros del sistema\n\n"
        "‚è≥ Esto tomar√° unos segundos...",
        parse_mode="Markdown"
    )
    
    await run_full_diagnostic(context)

async def cmd_cazar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Inicia monitoreo con diagn√≥stico"""
    global bot_active
    if bot_active:
        await update.message.reply_text("‚öôÔ∏è Monitoreo ya activo")
        return
    
    bot_active = True
    await update.message.reply_text(
        "üéØ *INICIANDO MONITOREO CON DIAGN√ìSTICO*\n\n"
        "El bot primero ejecutar√° diagn√≥stico autom√°tico\n"
        "y luego comenzar√° el monitoreo con logs detallados.",
        parse_mode="Markdown"
    )
    
    asyncio.create_task(monitor_with_diagnostic(context))

async def cmd_parar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Detiene el monitoreo"""
    global bot_active
    bot_active = False
    await update.message.reply_text("üõë Monitoreo detenido")

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Estado detallado del sistema"""
    status_msg = (
        f"ü©∫ *ESTADO DEL SISTEMA - DIAGN√ìSTICO*\n\n"
        f"üîß Monitoreo: {'üü¢ ACTIVO' if bot_active else 'üî¥ DETENIDO'}\n"
        f"üìä Tokens monitoreados: {len(monitored_tokens)}\n"
        f"üìà Tokens con historial: {len(price_histories)}\n"
        f"üìâ Tokens planos: {len(flat_tokens)}\n"
        f"üìû Requests API: {diagnostic_api.request_count}\n"
        f"üö´ √öltimo error: {diagnostic_api.last_error or 'Ninguno'}\n\n"
        f"‚öôÔ∏è *Configuraci√≥n actual:*\n"
        f"‚Ä¢ Volumen m√≠nimo: ${MIN_VOLUME_USD:,.0f}\n"
        f"‚Ä¢ Liquidez m√≠nima: ${MIN_LIQUIDITY:,.0f}\n"
        f"‚Ä¢ Breakout: {BREAKOUT_STEP}%\n"
        f"‚Ä¢ Intervalo: {UPDATE_INTERVAL}s"
    )
    await update.message.reply_text(status_msg, parse_mode="Markdown")

async def cmd_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra resumen de logs importantes"""
    logs_msg = (
        f"üìã *LOGS RECIENTES - RESUMEN*\n\n"
        f"Para ver logs completos:\n"
        f"Revisa la consola de Railway\n\n"
        f"üîç *Estad√≠sticas:*\n"
        f"‚Ä¢ Requests API: {diagnostic_api.request_count}\n"
        f"‚Ä¢ Tokens procesados: {len(monitored_tokens)}\n"
        f"‚Ä¢ Errores recientes: {diagnostic_api.last_error or 'Ninguno'}\n\n"
        f"üí° _Los logs detallados est√°n en la consola de Railway_"
    )
    await update.message.reply_text(logs_msg, parse_mode="Markdown")

# ===================== MAIN =====================
def main():
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN no configurado")
        return
        
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    commands = [
        ("start", cmd_start),
        ("diagnostico", cmd_diagnostico),
        ("cazar", cmd_cazar),
        ("parar", cmd_parar),
        ("status", cmd_status),
        ("logs", cmd_logs),
    ]
    
    for command, handler in commands:
        app.add_handler(CommandHandler(command, handler))
    
    logger.info("ü©∫ Bot de Diagn√≥stico Completo Iniciado")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
